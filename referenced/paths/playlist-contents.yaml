get:
  tags:
    - Playlists
  summary: Retrieve Playlist Contents
  description: |
    Gets the contents if a playlist. Should be paged by clients via standard mechanisms. 
    By default leaves are returned (e.g. episodes, movies). In order to return other types you can use the `type` parameter. 
    For example, you could use this to display a list of recently added albums vis a smart playlist. 
    Note that for dumb playlists, items have a `playlistItemID` attribute which is used for deleting or moving items.
  operationId: getPlaylistContent
  parameters:
    - name: playlistID
      description: the ID of the playlist
      in: path
      schema:
        type: number
      required: true
    - name: type
      description: the metadata type of the item to return
      in: query
      schema:
        type: number
      required: true
  responses:
    "200":
      description: The playlist contents
    "401":
      $ref: "../responses/401.yaml"

delete:
  tags:
    - Playlists
  summary: Delete Playlist Contents
  description: |
    Clears a playlist, only works with dumb playlists. Returns the playlist.
  operationId: clearPlaylistContent
  parameters:
    - name: playlistID
      description: the ID of the playlist
      in: path
      schema:
        type: number
      required: true
  responses:
    "200":
      description: The playlist contents are cleared
    "401":
      $ref: "../responses/401.yaml"

put:
  tags:
    - Playlists
  summary: Adding to a Playlist
  description: |
    Adds a generator to a playlist, same parameters as the POST above. With a dumb playlist, this adds the specified items to the playlist. 
    With a smart playlist, passing a new `uri` parameter replaces the rules for the playlist. Returns the playlist.
  operationId: clearPlaylistContent
  parameters:
    - name: playlistID
      description: the ID of the playlist
      in: path
      schema:
        type: number
      required: true
    - name: uri
      description: the content URI for the playlist
      in: query
      schema:
        type: string
        example: library://..
      required: true
    - name: playQueueID
      description: the play queue to add to a playlist
      in: query
      schema:
        type: number
        example: 123
      required: true
  responses:
    "200":
      description: Playlist Updated
    "401":
      $ref: "../responses/401.yaml"
